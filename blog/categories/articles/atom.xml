<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Articles | My New Home]]></title>
  <link href="http://eimer.co/blog/categories/articles/atom.xml" rel="self"/>
  <link href="http://eimer.co/"/>
  <updated>2013-01-11T14:52:02+01:00</updated>
  <id>http://eimer.co/</id>
  <author>
    <name><![CDATA[Martin Westin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The root of all bugs in iphone development?]]></title>
    <link href="http://eimer.co/blog/2010/07/29/the-root-of-all-bugs-in-iphone-development/"/>
    <updated>2010-07-29T00:00:00+02:00</updated>
    <id>http://eimer.co/blog/2010/07/29/the-root-of-all-bugs-in-iphone-development</id>
    <content type="html"><![CDATA[<p>Catchy title, sure. I don't write that as a universal truth but as my experience from developing my first iPhone app, <a href="http://extraction.eimermusic.com/">Extraction</a>.</p>

<h2>So what is it?</h2>

<p>In a word (or two): <strong>Memory Warnings</strong></p>

<p>Every single bug that was in my app when it shipped was related to memory warnings in some way. Had I tested memory warnings in the simulator more thoroughly they might never have bothered my users. My simple advice to other noob iphone developers is:</p>

<p>Simulate memory warnings in the simulator over and over in every conceivable view and state your app can be in.</p>

<h2>Example #1. Lost data</h2>

<p>Symptoms
Rarely, but sometimes, my app would loose the most recent data while going back and forth between my main and my detail view. Really odd? I had many wild ideas of why it would suddenly loose the most recent "item".</p>

<p>The cause
My app experienced occasional memory warnings (it takes photos which can for a brief time take up a lot of memory), sometimes causing the main view to unload and then reload when I returned to it. Normal behavior, but something I did not think much about. I had followed some tutorial or other (no finger-pointing here) and loaded my table of data in "viewDidLoad". Naturally when the view reloaded it also reloaded the data from disk and "lost" any recent data.</p>

<h2>Example #2. The Disappearing GUI</h2>

<p>Symptoms
Rarely, but sometimes, the entire detail view would just "go blank" when the keyboard appeared to edit a text area. The navbar was still there but the rest of the screen above the keyboard was just a nice background color.</p>

<p>The cause
Memory warnings again. ViewDidLoad was to blame again. This time the view registered itself to be notified about appearing keyboards and when the view reloaded after a memory warning it registered again and thus received notifications back-to-back. This caused my smooth scrolling to position the text area to happen twice and push everything off screen.</p>

<h2>The moral of the story</h2>

<p>ViewDidLoad can happen many times while your app is running. This is not too clear in most beginner tutorials.</p>

<p>Anything you do in a DidLoad or WillAppear you should "undo" (or do the reverse of) in the corresponding UnLoad or WillDisappear. For example:</p>

<p>Anything in the OS you register for, you really should resign from too.</p>

<p>This is all noob stuff but I think others may be scratching their heads over similar bugs. I hope it is not just me :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing GUI persistence in an iPhone App]]></title>
    <link href="http://eimer.co/blog/2010/07/12/implementing-gui-persistence-in-an-iphone-app/"/>
    <updated>2010-07-12T00:00:00+02:00</updated>
    <id>http://eimer.co/blog/2010/07/12/implementing-gui-persistence-in-an-iphone-app</id>
    <content type="html"><![CDATA[<p>With iOS 4, Apple pushes everyone to build our apps so that we preserve the state of the application when it terminates. This is because to the normal user there is no difference between an app being "pushed" to the background and an app being terminated. Apple want the users to feel like our apps never terminate. That they just leave them in the background a while.</p>

<p>I'll explain how I implemented this behaviour using NSUserDefaults in my app, <a href="http://extraction.eimermusic.com/">Extraction</a>. It may not be the most advanced technique or the best in any way. I just know it works for me.</p>

<p>I will use the main view in Extraction to exemplify this. It requires that I "remember" the following things when my app terminates, receives a memory warning or is suspended in the background.</p>

<ul>
    <li>The selected item in the basket selector (at the top)</li>
    <li>The state of the main button</li>
    <li>The time of the timer if it is running</li>
    <li>Finally, the scroll position of the Table View listing the stored extractions</li>
</ul>


<p>To handle the saving the restoration of the state of these elements I created two methods in my MainViewController, called <strong>saveGuiState</strong> and <strong>restoreGuiState</strong> of all things.</p>

<p>The save method stores each of these values in NSUserDefaults. This is really made to be a preference storage but I hope it is OK with Apple to use it for this as well :)</p>

<pre class="prettyprint linenums" lang="objc">
- (void)saveGuiState {
    // basket selector state
    [[NSUserDefaults standardUserDefaults] setInteger:[basketSelector selectedSegmentIndex] forKey:@"basketSelectorIndex"];

    // button state based on internal "runlevel" integer
    [[NSUserDefaults standardUserDefaults] setInteger:running forKey:@"running"];

    // timer interval
    [[NSUserDefaults standardUserDefaults] setDouble:startInterval forKey:@"startInterval"];

    // Table scrolling
    CGPoint contentOffset = [viewTable contentOffset];
    [[NSUserDefaults standardUserDefaults] setFloat:contentOffset.y forKey:@"contentOffsetY"];
}
</pre>


<p>It does nothing very complicated. It simply takes each value I need to restore the GUi and stores it to the Defaults database.</p>

<p>The most interesting detail for me was discovering the contentOffset property for UIScrollView (and also the subclass UITableView). It allows me to "scroll" the table to the exact pixel value it was scrolled to before. Very handy.</p>

<p>The restore method does the reverse. It sets each parameter in the GUI to the value in NSUserDefaults (if it exists).</p>

<pre class="prettyprint linenums" lang="objc">
- (void)restoreGuiState {
    
    // basket selector
    if ( NULL != [[NSUserDefaults standardUserDefaults] objectForKey:@"basketSelectorIndex"] ) {
        [basketSelector setSelectedSegmentIndex:[[NSUserDefaults standardUserDefaults] integerForKey:@"basketSelectorIndex"]];
    }
    
    // timer interval
    if ( NULL != [[NSUserDefaults standardUserDefaults] objectForKey:@"startInterval"] ) {
        startInterval = [[NSUserDefaults standardUserDefaults] doubleForKey:@"startInterval"];
        elapsedTime = [NSDate timeIntervalSinceReferenceDate] - startInterval;

        // restore timer if we have not been gone too long
        if ( elapsedTime < 90 ) {
            
            // running state
            if ( NULL != [[NSUserDefaults standardUserDefaults] objectForKey:@"running"] ) {
                running = [[NSUserDefaults standardUserDefaults] integerForKey:@"running"];
                
                // a little method for setting the button label for each run level
                [self stepButtonTitleForRunningState:running];
                
                if ( running && ![myTimer isValid] ) {
                    // restart an invalidated timer
                    myTimer = [NSTimer scheduledTimerWithTimeInterval: 0.05 target: self selector: @selector(updateTime) userInfo: nil repeats: YES];
                    // set the current timer object to the last one created
                    current = [results objectAtIndex:[results count] - 1];
                }
            }
            
        }
        
    }

    // Table scrolling
    [viewTable reloadData];
    if ( NULL != [[NSUserDefaults standardUserDefaults] objectForKey:@"contentOffsetY"] ) {
        CGPoint contentOffset = CGPointMake(0.0,[[NSUserDefaults standardUserDefaults] floatForKey:@"contentOffsetY"]);
        [viewTable setContentOffset:contentOffset animated:NO];
    } else {
        NSIndexPath *scrollIndexPath = [NSIndexPath indexPathForRow:([results count] - 1) inSection:0];
        [viewTable scrollToRowAtIndexPath:scrollIndexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
    }
}
</pre>


<p>Something to note here is that the if clauses check against the objectForKey value and not the integer or float. This is so it will return true even for 0 values that are set. For example, the default value for the selector is a double (index=1) if I checked against the integer I would never restore to a single basket setting.</p>

<p>Also the nested ifs are there so that I only restore timer-related things if it is appropriate.</p>

<p>These two methods are run then the view unloads and loads, respectively. I call the restore method in viewWillAppear and I set a bool so that I don't do it repeatedly unless the view has been unloaded since it was last seen. I think it has to do with the UITableView needing to populate itself and viewDidLoad was too early.</p>

<p>The save method is called from two places. viewDidUnload, obviously, and my "applicationWillTerminate" (which received the system notifications for both termination and entering background in iOS4). This is because viewDidUload does not fire when terminating the application and you are supposed to save state when entering background and about to be suspended.</p>

<p>One very important detail to note here is that NSUserDefaults syncs up with the OS periodically.... not immediately. Anything that is saved just before termination is very very very likely to be lost. It is a very simple fix though:</p>

<pre class="prettyprint linenums" lang="objc">
[self saveGuiState];
[[NSUserDefaults standardUserDefaults] synchronize];
</pre>


<p>That is it. That is all I do to make my app behave like it never quits. It even gets some multitasking feeling on non-multitasking devices. You can make a very quick phone call on your iPhone 3G or OG (The Original Generation iPhone) and return to Extraction in time to stop the timer. Pretty cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modifying a Projekktor Theme]]></title>
    <link href="http://eimer.co/blog/2010/05/09/modifying-a-projekktor-theme/"/>
    <updated>2010-05-09T00:00:00+02:00</updated>
    <id>http://eimer.co/blog/2010/05/09/modifying-a-projekktor-theme</id>
    <content type="html"><![CDATA[<p><a href="http://www.projekktor.com/">Projekktor</a> is a most excellent open-source video player for the web. It requires javascript but that is totally worth it. You get cross-browser compatibility, flash fallback, consistent GUI across browsers and much more. What i will explain in this short article is how to modify the GUI part.</p>

<p> The first thing I wanted to know was: <strong>What does the html look like?</strong> Since it is generated by javascript it is not readily apparent so here is the html structure of the video "controls".</p>

<pre class="prettyprint linenums" lang="php">
<div id="imzffxow_controls" class="ppcontrols" style="display: block; ">
  <div id="imzffxow_fsexit" class="ppfsexit" style="display: none; "></div>
  <div id="imzffxow_fsenter" class="ppfsenter" style="display: block; "></div>
  <div id="imzffxow_play" class="ppplay" style="display: none; "></div>
  <div id="imzffxow_pause" class="pppause" style="display: block; "></div>
  <div id="imzffxow_prev" class="ppprev"></div>
  <div id="imzffxow_next" class="ppnext"></div>
  <div id="imzffxow_title" class="pptitle">Wrath - YOUTUBE Flash API 2/4</div>
  <div id="imzffxow_tleft" class="pptleft">00:18 / 03:46</div>
  <div id="imzffxow_scrubber" class="ppscrubber">
    <div id="imzffxow_playhead" class="ppplayhead" style="width: 8.21199%; "></div>
    <div id="imzffxow_loaded" class="pploaded" style="width: 100%; "></div>
  </div>
  <div id="imzffxow_vslider" class="ppvslider" style="">
    <div id="imzffxow_vknob" class="ppvknob" style="left: 42.75px; "></div>
  </div>
  <div id="imzffxow_mute" class="ppmute"></div>
  <div id="imzffxow_vmax" class="ppvmax"></div>
</div>
</pre>


<p>The enclosing div (classed ppcontrols) is itself enclosed inside a set of tags that are positioned and make fixed-size box (the size of the video element). This makes things nice and workable. You can position and set the size for ppcontrols and then place each element in relation to this div.</p>

<p>I will continue to call each control element by it's class name since these are what you target in your css. Just to make things really obvious, here is a screenshot with the class-names added.</p>

<p><a href="http://www.eimermusic.com/articles/modifying-a-projekktor-theme/attachment/ppcontrols/" rel="attachment wp-att-99"><img src="http://eimer.co/images/uploads/2010/05/ppcontrols.png" alt="Projekktor Controls" title="ppcontrols" width="602" height="203" class="alignnone size-full wp-image-99" /></a></p>

<p>If you want a different look but like the general dimensions you can just start replacing the graphics in the theme folder of projekktor.</p>

<p>To my eyes the standard theme looks very nice. I wanted to keep the same look but make it resize to fit various video sizes. To achieve this I needed to make the size of the main ppcontrols div relative to the video frame. Instead of a fixed width I ended up with this css.</p>

<pre class="prettyprint linenums" lang="css">
.ppcontrols {  
    position: relative;
    left: 20px;
    margin-right: 40px;
    display: block;
    width: auto;
    height: 87px;
    margin-top: -110px;
    border: solid 2px #fff;
    -webkit-border-radius: 12px;
    -moz-border-radius: 12px;
    border-radius: 12px;
    background: transparent url(projekktor/ctrl-bg.png) 0 0 repeat-x;
    z-index:8000;
    padding: 0px;
}
</pre>


<p>This creates a control area that always stretches to 20px from the left and right edges. As you can see I also added a css border (with radius) and a new background to get close to the original graphics of the theme while still being flexible horizontally.</p>

<p>The I proceeded to position the elements relative to one of the edges or the middle of the controls area. For example:</p>

<pre class="prettyprint linenums" lang="css">
.ppfsenter {
...
    top: 50px;
    right:10px;
...
}
.ppplay {
...
    left: 50%;
    margin-left: -17px;
...
}
.ppscrubber {
...
    left: 13px;
    right: 13px;
...
}
</pre>


<p>With these minor changes to the css the full-screen buttons stick to the right edge and the play/pause buttons stick to the center. Items like the scrubber and the title are positioned in a similar way to the main ppcontrols div. I chose a different css to get the results this time ... just for the variation. Use whichever one you prefer.</p>

<p>The results of my modifications are available for download if you want to take a look at all of it or give it a test-drive.</p>

<p>"demo" (just the v0.6.1 release unpacked and edited)
<a href="http://dev.eimermusic.com/projekktor/readme.html">http://dev.eimermusic.com/projekktor/readme.html</a></p>

<p>the css and images in a zip-file
<a href="http://dev.eimermusic.com/projekktor/projekktor_theme_fluid.zip">http://dev.eimermusic.com/projekktor/projekktor_theme_fluid.zip</a><br />
<a href="http://dev.eimermusic.com/projekktor/projekktor_theme_fluid.tar.gz">http://dev.eimermusic.com/projekktor/projekktor_theme_fluid.tar.gz</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a modular application using CakePHP plugins]]></title>
    <link href="http://eimer.co/blog/2009/09/02/designing-a-modular-application-using-cakephp-plugins/"/>
    <updated>2009-09-02T00:00:00+02:00</updated>
    <id>http://eimer.co/blog/2009/09/02/designing-a-modular-application-using-cakephp-plugins</id>
    <content type="html"><![CDATA[<p>This article will try to explain how I build a modular application using plugins. I will cover how I implement them and integrate them into the main application.
</p>


<h2>Definition</h2>

<p>There are a lot of different ideas around about what to put into the CakePHP plugins directory. In this article a plugin extends the application kind-of like a plugin in Photoshop.</p>

<ul>
    <li>A plugin does not extend CakePHP or "any" application. It is specific to "this" application.</li>
    <li>A plugin may (or rather should) depend on the application.</li>
    <li>The application may not depend on any one plugin.</li>
</ul>


<h2>Context</h2>

<p>We need some context. An example application and how it makes use of plugins. I have chosen the application I continually develop at work. It is a system for communicating with mobile phones. Primarily via SMS and MMS. (That is: text messages and picture/video messages to most people.) I will use simplified and generalised features of this application to exemplify the design and implementation of plugins.</p>

<h2>The design</h2>

<p>The application has certain obvious core features. User management, managing phone numbers, sending SMS and MMS, receiving SMS and MMS, reporting on all transactions and other similar features.</p>

<p>Each concrete end-user feature is implemented as a plugin.
A few examples:
A newsletters module used to send offers and news to customers.
A feedback module used to receive and automatically publish incoming feedback from customers on the client's website among other things.
An opinions module to manage quick opinion polls.
A subscriptions module and many others.</p>

<p>Each of these make use of incoming and/or outgoing SMS and MMS messages in some way. Each one uses stored phone numbers. They all manage these things by making use of core features.</p>

<h2>How plugins talk to the main application</h2>

<p>This is the simple and obvious bit. A plugin can very simply just extend or associate itself with some resource in the main application.
As an example (finally some code!), a subscriber model would look like this.</p>

<pre class="prettyprint linenums" lang="php">
<?php  
class SubsSubscriber extends SubsAppModel { 
    var $name = 'SubsSubscriber';     
    var $belongsTo = array( 
        'Phone', 
        'SubsSubscription'=>array( 
            'className'    => 'Subs.SubsSubscription', 
            'counterCache' => true 
        ) 
    ); 
} 
?>
</pre>


<p>Not only does the subscriber belong to a subscription, it also belongs to a phone. Creating a Subscriber involves registering the subscriber's phone number with the Phone model. This ensures that there are no duplicate numbers, that any restrictions put on a certain phone is retained across the app. Things like that. The Phone model implements this registration method.</p>

<pre class="prettyprint linenums" lang="php">
function register($number) { 
    $number = clean_phone($number); // utility function to normalize number formatting 

    // not a real phone number: abort 
    if ( empty($number) ) { 
        return false; 
    } 
     
    // look for existing registration  
    $phone = $this->find('first',array( 
        'conditions'=>array( $this->alias.'.number'=>$number ) 
    )); 
     
    if ( !empty($phone) ) { 
        // found it, return it 
        return $phone; 
    } 

    // new number 
    $this->create(); 
    $data = array( 
        $this->alias=>array( 
            'number'=>$number 
        ) 
    ); 
     
    if ( $this->save($data) ) { 
        return $this->read(); 
    } else { 
        return false; 
    }     
}
</pre>


<p>That is really the basics behind how plugins interact with the main application. Similarly when a plugin needs to send an SMS, this is done using the SendSmsComponent in the main application. This component abstracts all the messy SOAP garbage phone-operators implement. :) Me, cranky? You bet!</p>

<h2>How about the other way around?</h2>

<p>The less obvious part is how the main application communicates back to the plugins. If I was starting out today I would certainly implement Eventful from cakealot.com, or something like Teknoid's observer pattern. I did something a bit different.</p>

<p>I keep all plugins in a table accessed via a model. That way I can have an administrative GUI to activate and deactivate different plugins for different clients. I also simplifies handling of permissions to plugins and menu-generation and other things. It is possible to get by with simply reading the app/plugins directory and caching that.</p>

<p>AppController implements some empty methods used as callbacks or event handlers of sorts. As an example, when an SMS message is received in the main application it parses the message and locates the plugin that should receive it. It stores the message in the central SMS model and notifies the plugin that a new message with the ID=123 has arrived and that the plugin should do something about it.</p>

<p>What happens next if of-course all up to the plugin. It may register the sender as a new subscriber, unregister the sender, post the message to the web, send an email, reply automatically... anything it wants. The point is that it is up to the plugin to decide.</p>

<p>The application does this via the much debated requestAction:</p>

<pre class="prettyprint linenums" lang="php">
$this->requestAction('/'.$module['Module']['name'].'/on_incoming_sms/'.$saved['IncomingSms']['id'], array('return')); 
</pre>


<p>And each plugin would implement this method to do something with the message. This is done in the "PluginnameController" as the request goes to /pluginname/on_incoming_sms/123. There is a positive side-effect to this. If I want some core feature to be called in this way I can make add a controller to the table of "modules" and requestAction will never know the difference. (This is why I still use a string url.)</p>

<pre class="prettyprint linenums" lang="php">
function on_incoming_sms($id = null) { 
    $this->autoRender = false; 
    if ( !isset($this->params['requested']) || empty($id) ) { // check that we are contacted "from within" 
        return false; 
    } 
    // do something useful here and return the id as confirmation 
    return $id; 
}
</pre>


<p>Now I feel the need to get a bit on the defensive. I can almost hear people shouting about thin controllers, fat models and the evil of requestAction. This is communication. that is the exactly what controllers are meant to do. In Cake this is usually between the browser and the models but in this case it is between the app and it's plugins. I don't have any such logical reason for using requestAction except that is is by far the most convenient way of achieving this kind of communication. Since these calls are usually done from either an API call (incoming sms) or from a cron shell any increase in request time is not a great priority. People get annoyed by an extra 0.4sec, a cron job doesn't :)</p>

<h2>Speaking of Cron jobs</h2>

<p>Housekeeping is done via cron. I have cron call a Cake shell every hour. This shell finds all modules and calls each one in turn. Again, the main application does not know or care about what each module is up to. One may update a cached view, another may remove expired items, another may send scheduled messages and guess what the Reports module does each hour?</p>

<p>This is an example of such a shell</p>

<pre class="prettyprint linenums" lang="php">
class HourlyShell extends Shell { 

    var $tasks = array('LogRotation'); 
    var $uses = array('Module'); 
     
    function main() { 
        $this->out('Hourly shell updates'); 
        $this->log('Hourly shell updates @ '.date('Y-m-d H:i:s'), 'cron'); 
         
        $this->LogRotation->execute(); 
         
        $this->update_plugins();         
    } 
     
    function update_plugins() { 
        $this->out('Updating plugins:'); 
        $modules = $this->Module->find('list', array( 
                'fields' => 'Module.controller', 
                'conditions' => array('Module.installed'=>'1'), 
                'recursive' => -1 
            ) 
        ); 

        foreach ( $modules as $module) { 
            $this->out('> '.$module); 
            $this->requestAction('/'.$module.'/on_hourly_update', array('return'=>true, 'bare'=>1)); 
        } 
    } 
}
</pre>


<p>The method being called will typically just pass the call along to one or more parts of the module that need to do something periodic. For example:</p>

<pre class="prettyprint linenums" lang="php">
function on_hourly_update() {
    // the template in AppController can be used to check that the call is legitimate.
    if ( parent::on_hourly_update() ) {
        $this->SubsSubscription->deleteExpired();
    }
}
</pre>


<h2>A bonus trick</h2>

<p>One cool thing that may not be apparent is that it is very easy to build a new feature as a normal controller and then turn it into a plugin. The trick is to name the plugin after the controller it should replace. Then you take the controller and make it the PluginnameController for that plugin. Cake will pass any call to that controller automatically. Example time:</p>

<p>/news/edit/123 - would be seen as /controller/action/param
/news/edit/123 - can also be be seen as /plugin/controller/action
but since there is no edit controller in the news plugin Cake will try:
/news/edit/123 - as /plugin{/pluginname}/action/param ending up in the PluginnameController and the edit action.</p>

<p>You will have to move the model and views to the plugin too, of-course.</p>

<h2>Closing remarks</h2>

<p>That is the basic gist of how I have chosen to design a modular system based on plugins. If you feel I have left something out, please comment and I will answer or update the article.</p>

<p>Plugins make up most end-user features.
Plugins rely on models, components, elements and other code from the main application.
The main application can pass events and information to plugins via the PluginnameController in each plugin.</p>

<p>I have left out tricks and hacks to keep the article focused. In the real application I use a patch to the dispatcher class that reformats urls for plugins. News plugin has NewsMessagesController but showing /news/news_messages/index in the url is redundant to say the least. The patch allowsme to use urls like /news/messages/index and have the dispatcher prepend the plugin name to the controller name. Since most urls point to plugins I chose to patch the core for this feature. It is not necessary to do any such patch to make use of plugins but for me it made plugins a more attractive option as the foundation of most features.</p>

<p>That's all. Thanks for reading.</p>

<p style="font-size:11px;">published @ <a href="http://bakery.cakephp.org/articles/view/designing-a-modular-application-using-cakephp-plugins">http://bakery.cakephp.org/articles/view/designing-a-modular-application-using-cakephp-plugins</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StarSchema (OLAP) setup for reporting in CakePHP]]></title>
    <link href="http://eimer.co/blog/2009/06/04/starschema-olap-setup-for-reporting-in-cakephp/"/>
    <updated>2009-06-04T00:00:00+02:00</updated>
    <id>http://eimer.co/blog/2009/06/04/starschema-olap-setup-for-reporting-in-cakephp</id>
    <content type="html"><![CDATA[<p>
When you need to gather statistics and reporting data from a large number of transactions (easily >1'000'000 rows) you need to transfer that data over to a reporting-friendly format to keep request times down. One popular database design for this is called a Star Schema. This is a simple re-usable StarSchema setup for CakePHP.
</p>




<p>
To make heads and tails of the following it help to have some basic understanding of star schemas and why anyone would use OLAP. If your gut-reaction is "Why not just do a find on the transaction data and format a reporting view from that?" then you should at least give the following page a look.
</p>


<p><a href="http://ciobriefings.com/Publications/WhitePapers/DesigningtheStarSchemaDatabase/tabid/101/Default.aspx">http://ciobriefings.com/...</a></p>

<h4>When do I need this?</h4>


<p></p>

<ul>
<li>The data you are reporting on is growing and your app is slowing down</li>
<li>The data is not stored the way you want to "view it" in your reports</li>
<li>You need to "view" your data in various different ways in your reports</li>
</ul>




<h4> Disclaimer</h4>


<p></p>

<p>
This article is to provide an implementation of a star schema setup for Cake. You still need to know how to DESIGN your schema. It is very important to plan ahead and create a schema that will accomodate ALL the ways (dimensions) you want to display your data. It is  a bit tricky to alter the schema afterwards.
</p>


<p>
This code uses some of ugly messy code that improves performance. The database goes against some Cake conventions (no pk!). It also contains some ugly messy code that is the fault of the author (me). Also this setup has only been run and tested on MySQL and uses a custom dbo that can put dynamic data into a Model's resultset.
</p>


<p>
This article is about the star schema implementation. It could be extended to aggregated tables to improve display performance even further. How to do this is not explained here.
</p>




<h4>Pieces to the puzzle</h4>


<p></p>

<ul>
<li>Extended DBO</li>
<li>Fact Model</li>
<li>Dimension Models</li>
<li>A Controller example</li>
</ul>


<h3>Extended DBO</h3>

<p>
I found this extended DBO a long time ago. Credit should go where credit is due but I have lost the reference to the original author. The DBO did more but I picked out the resultSet() method which is what we need here. To get an extended mysqli driver replace the "mysql_..." methods with "mysqli_..."
</p>


<pre class="prettyprint linenums" lang="php">
require_once (LIBS . 'model' . DS . 'datasources' . DS . 'dbo' . DS . 'dbo_mysql.php');
// app/models/datasources//dbo/dbo_mysql_ex.php
class DboMysqlEx extends DboMysql {
    var $description = "MySQL DBO Driver - Extended";
    
    // Extended 'resultSet' to allow alias processing
    // Fields should contain '((something)) AS Model__field'
    function resultSet(&$results) {
        $this->results =& $results;
        $this->map = array();
        $num_fields = mysql_num_fields($results);
        $index = 0;
        $j = 0;

        while ($j < $num_fields) {
            $column = mysql_fetch_field($results,$j);
            if (!empty($column->table)) {
                $this->map<$index++> = array($column->table, $column->name);
            } else {
                if (strpos($column->name, '__')) {
                    $parts = explode('__', $column->name);
                    $this->map<$index++> = array($parts<0>, $parts<1>);
                } else {
                    $this->map<$index++> = array(0, $column->name);
                }
            }
            $j++;
        }
    }
}
</pre>


<h3>Fact Model</h3>

<p>
The abstract fact model, the super, the parent, which all concrete fact models extend.
</p>


<p>
FactModel implements a few custom methods that are common among fact models. findFacts() is a custom find method that joins the fact model with all its dimensions and returns a nice data array with the requested fact. saveFact() is a custom save method that uses a custom query to automatically update each row if it exists already. This is done to improve performance (a lot).
</p>


<p></p>

<pre class="prettyprint linenums" lang="php">
/*
 *  Abstract super-model for Facts
 */
class FactModel extends AppModel {

    var $name = 'FactModel';
        
    // I prefer using findFacts() directly but like this you could quickly make a find type of the whole thing
    function find($type, $options = array()) {
        switch ($type) {
            case 'facts':
                return $this->findFacts($options<'fact'>,$options);
            default:
                return parent::find($type, $options);
        }
    }

    // this method will always be specific to each fact model
    function gather( $start_time = null ) {
        debug($this->alias.' must implement gather()');
        return false;
    }

    //-- 'mapped' re-arranges the results in an array-hierarchy according to the group parameter.
    //-- E.G. grouping by weekday might return array keys mon,tue... instead of 0,1...
    function findFacts($fact, $options) {
        $defaults = array(
            'conditions' =>'',
            'fields' =>array(),
            'order' =>'',
            'group' =>'',
            'mapped'=>false
        );
        $options = array_merge($defaults,$options);
        
        $dimensions = $this->getAssociated('belongsTo');
        
        $joins = $this->useTable.' AS '.$this->alias;
        $this_name = $this->alias;
        foreach ( $dimensions as $k => $dim ) {
            $dimension = $this->$dim->useTable.' AS '.$dim;
            $fk = $this->belongsTo<$dim><'foreignKey'>;
            $joins = "($dimension INNER JOIN $joins ON $dim.id = $this_name.$fk)";
        }
        $fields = array_merge($options<'fields'>,array($fact.' AS '.$this->alias.'__fact',$options<'group'>,$options<'order'>));
        $fields = array_unique($fields);
        
        $db =& ConnectionManager::getDataSource($this->useDbConfig);
        $query = $db->renderStatement('select', array(
            'conditions' => $db->conditions($options<'conditions'>, true, true, $this),
            'fields' => join(', ', $fields),
            'table' => '',
            'alias' => '',
            'order' => $db->order($options<'order'>),
            'limit' => '',
            'joins' => $joins,
            'group' => $db->group($options<'group'>)
        ));             
        $raw_facts = $this->query($query);
        
        if ( $options<'mapped'> ) {
            $group_str = str_replace(' ','',$options<'group'>);
            $groups = explode(',',$group_str);
            $last_group = array_pop($groups);
            
            $mapped_facts = array();
            foreach ( $raw_facts as $key => $val ) {
                $domain =& $mapped_facts;
                foreach ( $groups as $group ) {
                    $gKey = Set::extract($raw_facts,$key.'.'.$group);
                    if ( !isset($domain< $gKey >) ) {
                        $domain< $gKey > = array();
                    }
                    $domain =& $domain< $gKey >;
                }
                $gKey = Set::extract($raw_facts,$key.'.'.$last_group);
                $domain<$gKey> = $val;
            }

            return $mapped_facts;
        } else {
            return $raw_facts;
        }
    }
    
    
    function saveFact($fact) {
        
        $keys = array_keys($fact<$this->alias>);
        $values = array_values($fact<$this->alias>);
        
        $fields = $this->_getFactFields();
        $update = '';
        foreach ( $fields as $field ) {
            $update .= ' `'.$field.'` = '.$fact<$this->alias><$field>.',';
        }
                
        $query = 'INSERT INTO `'.$this->useTable.'` (`'. implode('`,`', $keys) .'`) VALUES ('. implode(',', $values) .') ON DUPLICATE KEY UPDATE'.substr($update,0,-1);
        $this->query($query);
    }
    
    function _getFactFields() {
        $fields = array();
        foreach ( $this->_schema as $field => $params ) {
            if ( !isset($params<'key'>) ) {
                $fields<> = $field;
            }
        }
        return $fields;
    }
}
</pre>


<h3>Example FactSentSms</h3>

<p>
A simple example of a concrete model extending FactModel. This one tracks outgoing SMS messages for a few dimensions. More on dimensions shortly.
</p>


<p>
In this example the gather() method is quite simple. It could contain any number of complex calculations or pulling of associated data. This method does all the heavy lifting of the data and an initial gathering of an existing transaction table can take a long time.

Notice that the fact table contains a field referencing the original primary key from the transaction table. This is to ensure that we can update the data without accidentally overwriting rows or creating duplicates. The table definition makes a unique key of the composite of all dimensions and this id. There is no primary key, by design.
</p>


<pre class="prettyprint linenums" lang="sql">
CREATE TABLE `fact_sent_smses` (
  `dimension_time_id` int(11) unsigned NOT NULL,
  `dimension_client_id` int(11) unsigned NOT NULL,
  `dimension_type_id` int(11) unsigned NOT NULL,
  `dimension_module_id` int(11) unsigned NOT NULL,
  `outgoing_id` int(11) unsigned NOT NULL,
  `num_smses` int(11) default '0',
  `response_code` int(11) default '0',
  `tarif_total` int(11) default '0',
  UNIQUE KEY `dimension_time_id` (`dimension_time_id`,`dimension_client_id`,`dimension_type_id`,`outgoing_id`,`dimension_module_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_binary
</pre>


<pre class="prettyprint linenums" lang="php">
/*
 *  Tracks outgoing messages with daily grain.
 */
App::import('Model','FactModel');
class FactSentSms extends FactModel {
    var $name = 'FactSentSms';
    var $useTable = 'fact_sent_smses';
    
    // dimensions are specified as belongsTo accosiations.
    var $belongsTo = array('DimensionTime','DimensionClient','DimensionType','DimensionModule');


    // gather new facts from transation model, run periodically from cron shell
    // this method will always be specific to each fact model
    function gather( $start_time = null ) {
        if ( empty($start_time) ) {
            $start_time = strtotime( '-1 hour', time() );
        }
        $start_date = date('Y-m-d H:i:s', $start_time);

        $OutgoingSms =& ClassRegistry::init('OutgoingSms');
        $page = 1;
        while ( $all = $OutgoingSms->find('all', array(
            'fields'=>array(
                '*',
                'DATE(OutgoingSms.created) AS OutgoingSms__date',
                'TIME(OutgoingSms.created) AS OutgoingSms__time',
                'DAYOFWEEK(OutgoingSms.created) AS OutgoingSms__day_of_week',
                'DAYOFMONTH(OutgoingSms.created) AS OutgoingSms__day_of_month',
                'DAYOFYEAR(OutgoingSms.created) AS OutgoingSms__day_of_year',
                'MONTH(OutgoingSms.created) AS OutgoingSms__month',
                'QUARTER(OutgoingSms.created) AS OutgoingSms__quarter',
                'YEAR(OutgoingSms.created) AS OutgoingSms__year'
            ),
            'conditions'=>array(
                'OutgoingSms.created >' => $start_date
            ),
            'recursive'=>'0',
            'order'=>'OutgoingSms.created ASC',
            'limit'=>'5000',
            'page' => $page++
        )) ) {
            foreach ( $all as $one ) {
                // Associate this fact with a record from each dimension
                $fact<'FactSentSms'><'dimension_time_id'> = $this->DimensionTime->getDimensionFor($one<'OutgoingSms'>);
                $fact<'FactSentSms'><'dimension_type_id'> = $this->DimensionType->getDimensionFor($one<'OutgoingSms'>);
                $fact<'FactSentSms'><'dimension_client_id'> = $this->DimensionClient->getDimensionFor($one<'OutgoingSms'>);
                $fact<'FactSentSms'><'dimension_module_id'> = $this->DimensionModule->getDimensionFor($one<'OutgoingSms'>);
                
                // Simple facts tracked
                $fact<'FactSentSms'><'response_code'> = $one<'OutgoingSms'><'response_code'>;
                $fact<'FactSentSms'><'tarif_total'> = $one<'OutgoingSms'><'data'><'tariffClass'>;
                $fact<'FactSentSms'><'outgoing_id'> = $one<'OutgoingSms'><'id'>; // copy original id so that we can do updates reliably
                $fact<'FactSentSms'><'num_smses'> = count(split_sms($one<'OutgoingSms'><'data'><'userData'>)); //WARNING. this line will fail unless you also have a function to split SMS messages

                $this->saveFact($fact);
            }
        }// end big while
    }
}
</pre>


<h3>Dimension Models</h3>

<p>
The dimension models are often simple. They only implement one custom method (also often simple): getDimensionFor(). This method takes a single record from the transaction model and figures out which dimension it belongs to. E.G. It can look at the created field and find the right time dimension to match that timestamp. It can check the a status code and simply map to a record representing that code.
</p>


<p>
The following example is a time dimension with a daily grain. I.E. the smallest increment in time is a day. I chose this dimension as the example since it is one that can be re-used, often without modification. If you look at gather() (above) you can see that I let MySQL do all the heavy calculations to pick out the date components. The method tries to find an existing dimension record and failing that it creates a new record. Simple pimple!
</p>


<p>
This example also implements the most basic form of caching. Since the dimensions usually contain a very limited number of records caching each one in memory will dramatically increase the performance of the gathering process. Say you have the price dimension with 10 prices (that is 10 records) and 800'000 transactions to map. Evenly distributed, each price record will be queried 80'000 times. 79'999 times to many. So by caching the queries you save your database 799'990 redundant queries just for a single dimension. My simple cache is a lot faster than using cacheQueries, probably because it is so very basic. When it is all that is needed I will gladly take the performance boost.
<p>

<pre class="prettyprint linenums" lang="sql">

CREATE TABLE `dimension_time` (
    `id` int(11) unsigned NOT NULL auto_increment,
    `day_of_week` int(11) default NULL,
    `day_of_month` int(11) default NULL,
    `day_of_year` int(11) default NULL,
    `month` int(11) default NULL,
    `quarter` int(11) default NULL,
    `year` int(11) default NULL,
    `holiday` int(1) default '0',
    `weekend` int(1) default '0',
    PRIMARY KEY  (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=52 DEFAULT CHARSET=utf8 COLLATE=utf8_binary;

</pre>
<br />
<pre class="prettyprint linenums" lang="php">
/*
 *  Time dimension with daily grain
 */
class DimensionTime extends AppModel {
    var $name = 'DimensionTime';
    var $useTable = 'dimension_time';
    //var $cacheQueries = true;
    var $dim_cache; // lesson learned: Do your own caching.

    function getDimensionFor($one) {
        if ( empty($one<'created'>) ) {
            $one<'created'> = '2000-01-01 00:00:00';            
            $one<'day_of_week'> = '1';
            $one<'day_of_month'> = '1';
            $one<'day_of_year'> = '1';
            $one<'month'> = '1';
            $one<'quarter'> = '1';
            $one<'year'> = '2000';
        }

        $dim_time = null;
        //-> add cache search here
        if ( !empty( $this->dim_cache< $one<'year'>.$one<'day_of_year'> > ) ) {
            $dim_time = $this->dim_cache< $one<'year'>.$one<'day_of_year'> >;
        }

        if ( empty($dim_time) ) {
            $dim_time = $this->find('first',array(
                'conditions' => array(
                    'DimensionTime.day_of_year' => $one<'day_of_year'>,
                    'DimensionTime.year' => $one<'year'>
                )
            ));
        }
        if ( empty($dim_time) ) {
            $dim_time<'DimensionTime'> = array(
                'day_of_week'=> $one<'day_of_week'>,
                'day_of_month'=> $one<'day_of_month'>,
                'day_of_year'=> $one<'day_of_year'>,
                'month'=> $one<'month'>,
                'quarter'=> $one<'quarter'>,
                'year'=> $one<'year'>,
                'holiday'=> -1,
                'weekend'=> ($one<'day_of_week'>>5) ? 1: 0,
            );
            $this->create($dim_time);
            $this->save($dim_time);
            $dim_time = $this->read();
        }
        //-> save to cache here     
        $this->dim_cache< $one<'year'>.$one<'day_of_year'> > = $dim_time;

        return $dim_time<'DimensionTime'><'id'>;
    }
    
}
</pre>

<p>
Then just rinse and repeat. Each dimension is very similar in its design. You just have to figure out what key values you need to store to define the desired "grain". Often this is a simple as using the categories a product can be in or the different status codes returned for a message.
</p>


### A ReportsController example
<p>
This is a simple ReportsController that uses the model FactSentSms to get statistics for pretty charts in the view. (Charts will not be covered here.) The first example method below is used to load up data for stats showing how many messages have been sent per weekday. The fact you find is usually a SUM(), COUNT() or AVG() or some other SQL function.
</p>
<p>
It looks a lot like a normal find. You can use order and conditions like normal. In the first example we only way to count records where the response code is a successful transaction (you need to know our system to know exactly why they are this way). but for and error report we want the opposite.
</p>
<p>
Group takes on a slightly special meaning here. It is used to define the dimension(s) from which to view the data. In the first example simply the day of week from the time dimension. You can add more groupings to get your data returned as a multi-dimensional array, as in the modules_and_types() method.
</p>
<p>
Mapped is a nifty little thing that replaces numerical array keys (0-n) with meaningful keys like: monday-sunday or 1-7 for day of week and  1-31 for day of month. It is a bit like findList() in that it prepares your data for the table or graph in the view.
</p>
<pre class="prettyprint linenums" lang="php">
class ReportsController extends AppController {
    var $name = 'Reports';
    var $uses = array('FactSentSms');
    var $billableResponseCodes = array('0','15'); // only these response codes result in a transaction.

    // show successful transactions per weekday
    function weekdays() {
        $weekly_smses = $this->FactSentSms->findFacts('Sum(FactSentSms.num_smses)',array(
            'group'=>'DimensionTime.day_of_week',
            'order'=>'DimensionTime.day_of_week',
            'conditions'=>array(
                '(FactSentSms.response_code IN ('.implode(',',$this->billableResponseCodes).') )'
            ),
            'mapped'=>true
        ));
        $this->set('weekly_smses',$weekly_smses);       
    }
    
    // show which modules (=parts of the system) have sent which types of messages
    function modules_and_types() {
        $all_modules = $this->FactSentSms->findFacts($sum,array(
            'fields' => array('Sum(FactSentSms.tarif_total) AS FactSentSms__tarif_total'), // additional fields can be defined
            'group'=>'DimensionModule.name, DimensionType.type', // multiple dimensions are possible
            'order'=>'DimensionModule.name',
            'conditions'=>array(
                '(FactSentSms.response_code IN ('.implode(',',$this->billableResponseCodes).') )'
            ),
            'mapped'=>true
        ));
        $this->set('all_modules',$all_modules);
    }
    
    // show error types for this month
    function errors_this_month() {
        $responses = $this->FactSentSms->findFacts($sum,array(
            'group'=>'FactSentSms.response_code',
            'order'=>'FactSentSms.response_code',
            'conditions'=>array(
                '(FactSentSms.response_code NOT IN ('.implode(',',$this->billableResponseCodes).') )',
                'DimensionTime.month'=>date('m'),
                'DimensionTime.year'=>date('Y')
            ),
            'mapped'=>true
        ));             
        $this->set('responses',$responses);
    }
}
</pre>

### Conclusion  
<p>
I hope you can start to see the benefits. Once the schema is setup we can write any number of reporting queries and "look at" the data from many different directions very quickly. For example, doing the weekly example on ≈220'000 records on our system is just over a second for the full Cake request cycle including rendering of the html. That is pretty dang good for a single (2 year old) rack server if you ask me.
</p>
<p>
If you design your dimensions cleverly they can be re-used for many fact tables. The time dimension is a prime candidate here. I can use that for all reports of all types of facts since it check for the generic created field.
</p>    

<p style="font-size:11px;">published @ <a href="http://bakery.cakephp.org/articles/view/starschema-olap-setup-for-reporting">http://bakery.cakephp.org/articles/view/starschema-olap-setup-for-reporting</a>
</p>

]]></content>
  </entry>
  
</feed>
